import lingo/pegcode/driver;
import sys/system;
import math/math;
import ds/tree;
import string;

Expr ::= Int, Sum, Sub, Mul, Div, Var, Neg;
Expr2 ::= Int, Quadruple;
Expr1 ::= Int, Triple;
Expr0 ::= Int, Pair;

Int(value : int);
Sum(l : Expr, r : Expr);
Sub(l : Expr, r : Expr);
Mul(l : Expr, r : Expr);
Div(l : Expr, r : Expr);
Var(name : string);
Neg(e : Expr);

Poly(coeffs : [Expr]);
RationalFunction(num : Poly, den : Poly);

Monomial(prod : Tree<string, int>);
Polynomial(sum : Tree<Monomial, int>);

buildSub(xs : [flow]) {
	fold(xs[1], xs[0], \acc, x -> Sub(acc, x))
}

buildDiv(xs : [flow]) {
	fold(xs[1], xs[0], \acc, x -> Div(acc, x))
}

simply(p : Pair<int, int>) -> Pair<int, int> {
	a = gcd(p.first, p.second);
	Pair(p.first / a, p.second / a);
}

MatchRes(result : bool, con : Tree<string, Expr>);

match(e1: Expr, e2: Expr, con: Tree<string, Expr>) -> MatchRes {
	switch(e1) {
		Int(value1): {
			switch(e2) {
				Int(value2): {
					MatchRes(value1 == value2, con);
				}
				default: {
					MatchRes(false, con);
				}
			}
		}
		Sum(l1, r1): {
			switch(e2) {
				Sum(l2, r2): {
					res1 = match(l1, l2, con);
					
					if (res1.result == false) {
						res1;
					} else {
						match(r1, r2, res1.con);
					}
				}
				default: {
					MatchRes(false, con);
				}
			}
		}
		Sub(l1, r1): {
			switch(e2) {
				Sub(l2, r2): {
					res1 = match(l1, l2, con);
					
					if (res1.result == false) {
						res1;
					} else {
						match(r1, r2, res1.con);
					}
				}
				default: {
					MatchRes(false, con);
				}
			}
		}
		Mul(l1, r1): {
			switch(e2) {
				Mul(l2, r2): {
					res1 = match(l1, l2, con);
					
					if (res1.result == false) {
						res1;
					} else {
						match(r1, r2, res1.con);
					}
				}
				default: {
					MatchRes(false, con);
				}
			}
		}
		Div(l1, r1): {
			switch(e2) {
				Div(l2, r2): {
					res1 = match(l1, l2, con);
					
					if (res1.result == false) {
						res1;
					} else {
						match(r1, r2, res1.con);
					}
				}
				default: {
					MatchRes(false, con);
				}
			}
		}
		Neg(arg1): {
			switch(e2) {
				Neg(arg2): {
					match(arg1, arg2, con);
				}
				default: {
					MatchRes(false, con);
				}
			}
		}
		Var(name1): {
			switch(lookupTree(con, name1)) {
				None(): {
					MatchRes(true, setTree(con, name1, e2));
				}
				Some(value): {
					MatchRes(value == e2, con);
				}
			}
		}
	}
}

simWithCon(e : Expr, con : Tree<string, Expr>) -> Expr {
	switch(e) {
		Int(value): {
			e;
		}
		Sum(l, r): {
			Sum(simWithCon(l, con), simWithCon(r, con));
		}
		Sub(l, r): {
			Sub(simWithCon(l, con), simWithCon(r, con));
		}
		Mul(l, r): {
			Mul(simWithCon(l, con), simWithCon(r, con));
		}
		Div(l, r): {
			Div(simWithCon(l, con), simWithCon(r, con));
		}
		Neg(arg): {
			Neg(simWithCon(arg, con));
		}
		Var(name): {
			switch(lookupTree(con, name)) {
				None(): {
					Var(name);
				}
				Some(value): {
					value;
				}
			}
		}
	}
}

trySim(e : Expr, l : Link) -> Expr {
	res = match(l.from, e, makeTree());

	if (res.result != false) {
		simWithCon(l.to, res.con);
	} else {
		e;
	}
}

Link(from:Expr, to:Expr);

createArr(chan : Pair<Tree<Expr, Pair<Expr, [string]>>, [Expr]>) -> [Link] {
	fold(chan.second, [], \arr, e -> {
		may = lookupTree(chan.first, e);
		e1 = either(may, Pair(Int(0), []));
		concat(arr, [Link(e, e1.first)]);
	});
}

simInAllRules(expr : Expr, chan : Pair<Tree<Expr, Pair<Expr, [string]>>, [Expr]>) -> Expr {
	arr = createArr(chan);
	e1 = fold(arr, expr, \exp, t -> {
		trySim(exp, t);
	});

	switch(e1) {
		Int(value): {
			Int(value);
		}
		Var(name): {
			Var(name);
		}
		Sum(l, r): {
			Sum(simInAllRules(l, chan), simInAllRules(r, chan));
		}
		Sub(l, r): {
			Sub(simInAllRules(l, chan), simInAllRules(r, chan));
		}
		Mul(l, r): {
			Mul(simInAllRules(l, chan), simInAllRules(r, chan));
		}
		Div(l, r): {
			Div(simInAllRules(l, chan), simInAllRules(r, chan));
		}
		Neg(e): {
			Neg(simInAllRules(e, chan));
		}
	}
}

simplyFun(expr : Expr, chan : Pair<Tree<Expr, Pair<Expr, [string]>>, [Expr]>) -> Expr {
	expr1 = simInAllRules(expr, chan);
	
	if (expr == expr1) {
		expr;
	} else {
		simplyFun(expr1, chan);
	}
}

exprToRatio(expr : Expr) -> RationalFunction {
	switch (expr : Expr) {
		Sum(l, r): {
			sumRatio(exprToRatio(l), exprToRatio(r));
		}
		Sub(l, r): {
			subRatio(exprToRatio(l), exprToRatio(r));
		}
		Mul(l, r): {
			mulRatio(exprToRatio(l), exprToRatio(r));
		}
		Div(l, r): {
			divRatio(exprToRatio(l), exprToRatio(r));
		}
		Var(name): {
			RationalFunction(Poly([Var(name)]), Poly([Int(1)]));
		}
		Neg(e): {
			mulRatio(RationalFunction(Poly([Int(-1)]), Poly([Int(1)])), exprToRatio(e));
		}
		Int(value): {
			RationalFunction(Poly([Int(value)]), Poly([Int(1)]));
		}
	}
}

sumRatio(a : RationalFunction, b : RationalFunction) -> RationalFunction {
	num = sumPoly(mulPoly(a.num, b.den), mulPoly(b.num, a.den));
	den = mulPoly(a.den, b.den);
	RationalFunction(num, den);
}

subRatio(a : RationalFunction, b : RationalFunction) -> RationalFunction {
	num = subPoly(mulPoly(a.num, b.den), mulPoly(b.num, a.den));
	den = mulPoly(a.den, b.den);
	RationalFunction(num, den);
}

mulRatio(a : RationalFunction, b : RationalFunction) -> RationalFunction {
	num = mulPoly(a.num, b.num);
	den = mulPoly(a.den, b.den);
	RationalFunction(num, den);
}

divRatio(a : RationalFunction, b : RationalFunction) -> RationalFunction {
	num = mulPoly(a.num, b.den);
	den = mulPoly(a.den, b.num);
	RationalFunction(num, den);
}

sumPoly(a : Poly, b : Poly) -> Poly {
	if (a.coeffs[0] == Int(0)) {
		Poly([b.coeffs[0]]);
	} else if (b.coeffs[0] == Int(0)) {
		Poly([a.coeffs[0]]);
	} else {
		Poly([Sum(a.coeffs[0], b.coeffs[0])]);
	}
}

subPoly(a : Poly, b : Poly) -> Poly {
	if (a.coeffs[0] == Int(0)) {
		Poly([Neg(b.coeffs[0])]);
	} else if (b.coeffs[0] == Int(0)) {
		Poly([a.coeffs[0]]);
	} else {
		Poly([Sub(a.coeffs[0], b.coeffs[0])]);
	}
}

mulPoly(a : Poly, b : Poly) -> Poly {
	if (a.coeffs[0] == Int(0) || b.coeffs[0] == Int(0)) {
		Poly([Int(0)]);
	} else if (a.coeffs[0] == Int(1)) {
		Poly([b.coeffs[0]]);
	} else if (b.coeffs[0] == Int(1)) {
		Poly([a.coeffs[0]]);
	} else {
		Poly([Mul(a.coeffs[0], b.coeffs[0])]);
	} 
}

expr2polynomial(e : Expr) -> Polynomial {
    switch(e) {
        Int(val) : Polynomial(makeTree1(Monomial(makeTree1("1", 1)), val));
        Var(name) : Polynomial(makeTree1(Monomial(makeTree1(name, 1)), 1));
        Sum(l, r) : {
            Polynomial(mergeTreeCustom(expr2polynomial(l).sum, expr2polynomial(r).sum, \var, k1, k2 -> k1 + k2));
        }
        Sub(l, r) : {
            Polynomial(mergeTreeCustom(expr2polynomial(l).sum, expr2polynomial(Neg(r)).sum, \var, k1, k2 -> k1 + k2));
        }
        Neg(arg) : {
            Polynomial(mapTree(expr2polynomial(arg).sum, \k -> -k));
        }
        Mul(l, r) : {
            treeL = expr2polynomial(l).sum;
            treeR = expr2polynomial(r).sum;
            Polynomial(
                foldTree(treeL, makeTree(), \monoL, k1, acc1 -> {
                    foldTree(treeR, acc1, \monoR, k2, acc2 -> {
                        mergedMonos = Monomial(mergeTreeCustom(monoL.prod, monoR.prod, \var, deg1, deg2 -> {
                            if (var == "1") 1
                            else deg1 + deg2
                        }));
                        mergeTreeCustom(acc2, makeTree1(mergedMonos, k1 * k2), \var, c1, c2 -> c1 + c2);
                    });
                })
            );
        }
        default : Polynomial(makeTree());
    }
}

calculate(expr : Expr, vars : Tree<string, Pair<int, int>>) -> Pair<int, int> {
	switch (expr : Expr) {
		Sum(l, r): {
			a = calculate(l, vars);
			b = calculate(r, vars);
			temp = Pair(a.first * b.second + b.first * a.second, a.second * b.second);
			simply(temp);
		}
		Sub(l, r): {
			a = calculate(l, vars);
			b = calculate(r, vars);
			temp = Pair(a.first * b.second - b.first * a.second, a.second * b.second);
			simply(temp);
		}
		Mul(l, r): {
			a = calculate(l, vars);
			b = calculate(r, vars);
			temp = Pair(a.first * b.first, a.second * b.second);
			simply(temp);
		}
		Div(l, r): {
			a = calculate(l, vars);
			b = calculate(r, vars);
			temp = Pair(a.first * b.second, a.second * b.first);
			simply(temp);
		}
		Var(name): {
			assert(containsKeyTree(vars, name), strGlue([name, "-not found"], ""));
			temp = either(lookupTree(vars, name), Pair(1, 1));
			simply(temp)
		}
		Neg(e): {
			a = calculate(e, vars);
			Pair(-a.first, a.second);
		}
		Int(value): {
			Pair(value, 1);
		}
	}
}

myToString(expr: Expr) -> string {
	switch (expr : Expr) {
		Sum(l, r): {
			temp = strGlue([myToString(l), myToString(r)], "+");
			strGlue(["(", temp, ")"], "");
		}
		Sub(l, r): {
			temp = strGlue([myToString(l), myToString(r)], "-");
			strGlue(["(", temp, ")"], "");
		}
		Mul(l, r): {
			temp = strGlue([myToString(l), myToString(r)], "*");
			strGlue(["(", temp, ")"], "");
		}
		Div(l, r): {
			temp = strGlue([myToString(l), myToString(r)], "/");
			strGlue(["(", temp, ")"], "");
		}
		Var(name): {
			name;
		}
		Neg(e): {
			strGlue(["(-", myToString(e), ")"], "");
		}
		Int(value): {
			i2s(value);
		}
	}
}

showRati(rati : RationalFunction) -> void {
	println(strGlue(["Num: ", myToString(rati.num.coeffs[0]), "\nDen: ", myToString(rati.den.coeffs[0])], ""));
}

monomial2s(m : Monomial) -> string {
    foldTree(m.prod, "", \var, deg, acc -> {
        if (var == "1") { 
			acc
		} else if (deg == 1) {
			concatStrings([acc, " * ", var])
		} else if (deg == 0) {
			acc
		} else { 
			concatStrings([acc, " * ", var, "^", i2s(deg)])
		}
    });
}

polynomial2s(p : Polynomial) -> string {
    foldTree(p.sum, "", \mono, k, acc -> {
        if (acc == "") {
			concatStrings(["(", i2s(k), monomial2s(mono), ")"])
		} else { 
			concatStrings([acc, " + (", i2s(k), monomial2s(mono), ")"]);
		}
    });
}

ratFunc2s(p : [Polynomial]) -> string {
	if (p[0] == p[1]) {
		"Num: (1)\nDen: (1)";
	} else if (length(p) == 1) {
		"Num: " + polynomial2s(p[0]);
	} else {
		"Num: " + polynomial2s(p[0]) + "\nDen: " + polynomial2s(p[1]);
	}
}

changeRat(rati : RationalFunction) -> [Polynomial] {
	[expr2polynomial(rati.num.coeffs[0]), expr2polynomial(rati.den.coeffs[0])];
}

loopSup(beg : int, acc : Expr, deg : int, var : string) -> Expr{
	if (beg == deg) {
		acc;
	} else {
		if (isDigits(var)) {
			if (acc != Int(1)) {
				loopSup(beg + 1, Mul(acc, Int(s2i(var))), deg, var);
			} else {
				loopSup(beg + 1, Int(s2i(var)), deg, var);
			}
		} else {
			if (acc != Int(1)) {
				loopSup(beg + 1, Mul(acc, Var(var)), deg, var);
			} else {
				loopSup(beg + 1, Var(var), deg, var);
			}
		}
	}
}

monomial2expr(m : Monomial) -> Expr {
	foldTree(m.prod, Int(1), \var, deg, acc -> {
		if (var == "1") {
			acc;
		} else if (deg == 1) {
			if (isDigits(var)) {
				if (acc != Int(1)) {
					Mul(acc, Int(s2i(var)));
				} else {
					Int(s2i(var));
				}
			} else {
				if (acc != Int(1)) {
					Mul(acc, Var(var));
				} else {
					Var(var);
				}
			}
		} else if (deg == 0) {
			acc;
		} else {
			loopSup(0, acc, deg, var);
		}
	});
}

polynomial2expr(p : Polynomial) -> Expr {
	foldTree(p.sum, Int(0), \mono, k, acc -> {
		if (acc == Int(0)) {
			tmp = monomial2expr(mono);

			if (tmp == Int(1)) {
				Int(k);
			} else if (k != 1) {
				Mul(Int(k), tmp);
			} else {
				tmp;
			}
		} else {
			tmp = monomial2expr(mono);

			if (tmp == Int(1)) {
				Sum(acc, Int(k));
			} else if (k != 1) {
				Sum(acc, Mul(Int(k), tmp));
			} else {
				Sum(acc, tmp);
			}
		}
	});
}

normExpr(p : [Polynomial]) -> [Expr] {
	[polynomial2expr(p[0]), polynomial2expr(p[1])];
}

initTree(expr : Expr1, tree : Tree<string, Pair<int, int>>) -> Tree<string, Pair<int, int>> {
	switch (expr : Expr1) {
		Triple(name, value, next): {
			temp = setTree(tree, name, value);
			initTree(next, temp);
		}
		Int(value): {
			tree;
		}
	}
}

initVars(expr : Expr0, arr : [string]) -> [string] {
	switch (expr : Expr0) {
		Pair(name, next): {
			temp = concat(arr, [name]);
			initVars(next, temp);
		}
		Int(value): {
			arr;
		}
	}
}

initChange(expr : Expr2, chan : Pair<Tree<Expr, Pair<Expr, [string]>>, [Expr]>) -> Pair<Tree<Expr, Pair<Expr, [string]>>, [Expr]> {
	switch (expr : Expr2) {
		Quadruple(a, b, values, next): {
			c = initVars(values, []);
			d = concat(chan.second, [a]);
			temp = setTree(chan.first, a, Pair(b, c));
			initChange(next, Pair(temp, d));
		}
		Int(value): {
			chan;
		}
	}
}

lingoGrammarOp : ref Maybe<[PegOp]> = ref None();

lingoGrammar() {
	//onlyOnce(lingoGrammarOp, \ -> {
	//	compilePegGrammar("#include grammar.lingo");
	//});

	compilePegGrammar("#include grammar.lingo");
}

lingoGrammar1() {
	//onlyOnce(lingoGrammarOp, \ -> {
	//	compilePegGrammar("#include variables.lingo");
	//});

	compilePegGrammar("#include variables.lingo");
}

lingoGrammar2() {
	//onlyOnce(lingoGrammarOp, \ -> {
	//	compilePegGrammar("#include changes.lingo");
	//});

	compilePegGrammar("#include changes.lingo");
}

specialPegActions = {
	t = setTree(defaultPegActions.t, "buildSub", buildSub);
	SemanticActions(t);
}

specialPegActions1 = {
	t = setTree(specialPegActions.t, "buildDiv", buildDiv);
	SemanticActions(t);
}

main() {
	tree = makeTree();

	println("Enter the changes: ");
	varInput = readUntil("\n");
	println("");

	vars = parsic(lingoGrammar2(), varInput, specialPegActions1);
	//println("Result of parsic: "); println(vars); println("");

	modVars = initChange(vars, Pair(tree, []));
	//println("Result of initChange: "); println(modVars); println("");

	println("Enter the expression: ");
	exprInput = readUntil("\n");
	println("");

	result = parsic(lingoGrammar(), exprInput, specialPegActions1);
	//println("Result of parsic: "); println(result); println("");

	rati = exprToRatio(result);
	rat = changeRat(rati);

	//println(ratFunc2s(rat));
	//println("");

	//exprs = normExpr(rat);

	//println(concatStrings(["Num: ", myToString(simplyFun(exprs[0], modVars))]));
	//println(concatStrings(["Den: ", myToString(simplyFun(exprs[1], modVars))]));
	//println("");

	//println(result);
	//println(simplyFun(result, modVars));
	//println("");

	println(concatStrings(["Before: ", myToString(result)]));
	println(concatStrings(["After: ", myToString(simplyFun(result, modVars))]));

	quit(0);
}